

  jmp eof_lib_vars
  
CHAR_A  = 1
CHAR_B  = 2
CHAR_C  = 3
CHAR_D  = 4
CHAR_E  = 5
CHAR_F  = 6
CHAR_G  = 7
CHAR_H  = 8
CHAR_I  = 9
CHAR_J  = 10
CHAR_K  = 11
CHAR_L  = 12
CHAR_M  = 13
CHAR_N  = 14
CHAR_O  = 15
CHAR_P  = 16
CHAR_Q  = 17
CHAR_R  = 18
CHAR_S  = 19
CHAR_T  = 20
CHAR_U  = 21
CHAR_V  = 22
CHAR_W  = 23
CHAR_X  = 24
CHAR_Y  = 25
CHAR_Z  = 26
CHAR_PIQ= $41
CHAR_0  = $30
CHAR_1  = $31
CHAR_2  = $32
CHAR_3  = $33
CHAR_4  = $34
CHAR_5  = $35
CHAR_6  = $36
CHAR_7  = $37
CHAR_8  = $38
CHAR_9  = $39

CIA1_CLOCK_TENTH    = $dc08         ;Adresse zehntel Sekunden (Uhrzeit) im CIA1
CIA1_CLOCK_SECONDS  = $dc09         ;Adresse Sekunden (Uhrzeit) im CIA1

SCREEN_WIDTH  = 40
SCREEN_HEIGHT  = 25
SCREEN_SIZE = 1000

GAME_SPEED = 5
; PLAYER
POINTER = $fd  ; 16bit $c2 + $c3 (textmode = 1000 chars (40x25))
SCREEN_POINTER = $fb ; 16bit
ZERO_PAGE_BYTE = $02 ; one of the few free zero page bytes of the c64


CIA1_CLOCK_TENTH    = $dc08         ;Adresse zehntel Sekunden (Uhrzeit) im CIA1
CIA1_CLOCK_SECONDS  = $dc09         ;Adresse Sekunden (Uhrzeit) im CIA1

GAME_SPEED = 5
; PLAYER
POINTER = $fd  ; 16bit $c2 + $c3 (textmode = 1000 chars (40x25))
SCREEN_POINTER = $fb ; 16bit
ZERO_PAGE_BYTE = $02 ; one of the few free zero page bytes of the c64

FIXED_VARIABLES_START     = $c000
OOP_DEFAULT_MEM_START             = $c500
TEMP_VAR                  = FIXED_VARIABLES_START+1
STACK_A                   = FIXED_VARIABLES_START+2
STACK_X                   = FIXED_VARIABLES_START+3
STACK_Y                   = FIXED_VARIABLES_START+4
SELECTED_INPUT_DEVICE     = FIXED_VARIABLES_START+5
ACTIVE_INPUT_STATE        = FIXED_VARIABLES_START+6
;*** Platzhalter f√ºr unseren Startwert
RANDOM_SEED               = FIXED_VARIABLES_START+9
GAME_LOOP_COUNTER         = FIXED_VARIABLES_START+10
GAME_LOOP_COUNTER_PHYSICS = FIXED_VARIABLES_START+11
GAME_STATE                = FIXED_VARIABLES_START+12
TEMP_ARRAY_10_LENGTH      = FIXED_VARIABLES_START+13 ;length of array
TEMP_ARRAY_10             = FIXED_VARIABLES_START+14 ; 10 bytes of temp array
  ; default location for variable memory allocation
MEMORY_MANAGER_DEFAULT_RAM_START  = $ca00
MEMORY_MANAGER_DEFAULT_RAM_END    = $cfff
MEMORY_MANAGER_RAM_START          = FIXED_VARIABLES_START+15 ; 2 bytes pointer
MEMORY_MANAGER_RAM_STACK_POINTER  = FIXED_VARIABLES_START+17 ; 2 bytes pointer
MEMORY_MANAGER_RAM_END            = FIXED_VARIABLES_START+19 ; 2 bytes pointer
MEMORY_MANAGER_MAX_RAM_SIZE       = FIXED_VARIABLES_START+21 ; 2 bytes pointer

P_CURRENT_OBJECT_PROPERTIES       = FIXED_VARIABLES_START+23 ; 2 bytes pointer
P_CURRENT_OBJECT_DEFINITION       = FIXED_VARIABLES_START+25 ; 2 bytes pointer

; treat this word items as lists
WORD_ITEM_LENGTH          = FIXED_VARIABLES_START+30 ; 2 bytes
WORD_ITEM                 = FIXED_VARIABLES_START+31 ; 2 bytes
WORD_ITEM2_LENGTH         = FIXED_VARIABLES_START+33 ; 2 bytes
WORD_ITEM2                = FIXED_VARIABLES_START+34 ; 2 bytes

FUNC_list_compare_all_PA_COUNTER  = FIXED_VARIABLES_START+36
FUNC_pop_push_STACK_A          = FIXED_VARIABLES_START+37
FUNC_check_if_we_have_key_DOORS_KEYS_DEFINITION_PLIST_ITEM_LOW = FIXED_VARIABLES_START+38
FUNC_check_if_we_have_key_DOORS_KEYS_DEFINITION_PLIST_ITEM_HIGH = FIXED_VARIABLES_START+39
FUNC_try_player_move_to_CLEAR_PLAYER_POS  = FIXED_VARIABLES_START+39
FUNC_drawtext_VVAV_X = FIXED_VARIABLES_START+40
FUNC_drawtext_VVAV_Y = FIXED_VARIABLES_START+41
FUNC_blinkText_VVAVV_Switch = FIXED_VARIABLES_START+42
FUNC_RETURN_VALUE  = FIXED_VARIABLES_START+42 ; load the accu with this value to do branching after the function
  ; 0 = true, 1 = false (because branch tests for zero flag, equal means zero)
FUNC_FIRE_PRESSED = FIXED_VARIABLES_START+43
FUNC_find_char_on_screen_Q = FIXED_VARIABLES_START+44
FUNC_find_char_on_screen_X = FIXED_VARIABLES_START+45
FUNC_find_char_on_screen_Y = FIXED_VARIABLES_START+46
FUNC_mul_V                  = FIXED_VARIABLES_START+47
FUNC_pList_contains_listValues_AA_ListLength = FIXED_VARIABLES_START+48
FUNC_set_sprite_Vic_Index = FIXED_VARIABLES_START+49
FUNC_pointer_temp_stack_1 = FIXED_VARIABLES_START+50
FUNC_pointer_temp_stack_2 = FIXED_VARIABLES_START+51
FUNC_pointer_temp_stack_3 = FIXED_VARIABLES_START+52
FUNC_replace_colorChar_color_VVV_color  = FIXED_VARIABLES_START+53
FUNC_drawChar_VVAA_color  = FIXED_VARIABLES_START+54
FUNC_blockInc_AVV_blockCount = FIXED_VARIABLES_START+55
FUNC_call_gameobjects_func_regY_MethodToCallIndex = FIXED_VARIABLES_START+56
CLASS_LIST_ARRAY_LENGTH = FIXED_VARIABLES_START+57

FUNC_PARAM_1 = FIXED_VARIABLES_START+58
FUNC_PARAM_2 = FIXED_VARIABLES_START+59
FUNC_PARAM_3 = FIXED_VARIABLES_START+60
FUNC_PARAM_4 = FIXED_VARIABLES_START+61
FUNC_PARAM_5 = FIXED_VARIABLES_START+62
FUNC_PARAM_6 = FIXED_VARIABLES_START+63
FUNC_PARAM_7 = FIXED_VARIABLES_START+64
FUNC_PARAM_8 = FIXED_VARIABLES_START+65
FUNC_PARAM_9 = FIXED_VARIABLES_START+66

GAME_STATE_STAGE = FIXED_VARIABLES_START+200
GAME_STATE_PREV = FIXED_VARIABLES_START+201

KEY_PRESSED       = FIXED_VARIABLES_START+202
KEY_FIRE_PRESSED  = FIXED_VARIABLES_START+202
KEY_UP_PRESSED    = FIXED_VARIABLES_START+203
KEY_DOWN_PRESSED  = FIXED_VARIABLES_START+204
KEY_LEFT_PRESSED  = FIXED_VARIABLES_START+205
KEY_RIGHT_PRESSED = FIXED_VARIABLES_START+206

RASTER_LINES_LIST_INDEX = FIXED_VARIABLES_START+207
CURRENT_RASTER_LINE_NUMBER = FIXED_VARIABLES_START+208

KEY_FIRE    = 0 
KEY_UP      = 1
KEY_DOWN    = 2
KEY_LEFT    = 3
KEY_RIGHT   = 4

GAME_STATE_INIT           = 0
GAME_STATE_RUNNING        = 1
GAME_STATE_GAMEOVER       = 2

GAME_STATE_STAGE_START    = 0
GAME_STATE_STAGE_LOOP     = 1

; OOP
OOP_VARIABLES_START = FIXED_VARIABLES_START + $00ff
OOP_CONSTRUCTOR_RETURN = OOP_VARIABLES_START ; pointer to a defintion created by a constructor


VARIABLES_START       = FIXED_VARIABLES_START + $01ff

; SYS FUNCTIONS
SYS_CHROUT    = $ffd2        ;Jump-Table Adr.: Zeichenausgabe
SYS_SETCURSOR = $fff0        ;Jump-Table Adr.: get/set cursor PLAYER_POS

PETSCII_NUMBERS_START = 48

eof_lib_vars

pha


lda #0
sta RASTER_LINES_LIST_INDEX
lda #1
sta KEY_FIRE_PRESSED
sta KEY_UP_PRESSED
sta KEY_DOWN_PRESSED
sta KEY_LEFT_PRESSED
sta KEY_RIGHT_PRESSED

lda #10             ; first byte is length
sta TEMP_ARRAY_10_LENGTH
lda #GAME_STATE_INIT
sta GAME_STATE
lda #2
sta WORD_ITEM_LENGTH
sta WORD_ITEM2_LENGTH
lda #$ff
sta GAME_STATE_PREV
pla
